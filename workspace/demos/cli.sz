class Command(name: string, arguments: list, execute: task)

task<int> main {
    const variables = {}

    const commands = [
        Command("quit", ["status"], task (args) {
            try -> std::exit_process(args::get(0)::int())
            catch exception -> std::printlnf("Failed to execute 'quit': %", exception::details)
        }),

        Command("echo", null, task (args) {
            std::println(args::join(" ", "%"))
        }),

        Command("store", ["identifier", "value"], task (args) {
            variables::set(args::get(0), args::get(1))
            std::printlnf("Set variable '%' to '%'", [args::get(0), args::get(1)])
        })
    ]

    while (true) {
        const input = std::readln()::split(" ")

        if (input::is_empty()) {
            continue
        }

        mut arguments = input::after(1)

        const new = []
        const br = false

        for (argument : arguments) {
            if (argument::char_at(0) == "$") {
                try -> new::add(variables::get(argument::after(1)))
                catch exception {
                    std::printlnf("Couldn't find variable '%'", argument::after(1))
                    br = true
                    break
                }
            } else {
                new::add(argument)
            }
        }

        if (br) {
            continue
        }

        arguments = new

        mut found = false

        for (command : commands) {
            if (input::get(0) ~= command::name) {
                if (command::arguments == null || arguments::length() == command::arguments::length()) {
                    command::execute(arguments)
                } else {
                    std::printlnf("Invalid arguments for '%'. Expected '% %'", [command::name, command::name, command::arguments::join(" ", "[%]")])
                }

                found = true
                break
            }
        }

        if (!found) {
            std::println("Command not found!")
        }
    }

}